# ********** basic chapter  *******************
# defination , comments , print , sep , end , 
# variable , keywords , data types 
# rules of adding datatypes 
# float and int div and % ( /  //   %)
# if elif else   ||| if else  ||  =  and  == 
# for loop ||| while loop  || for else || while else 
# break || continue || pass 
# escape sequences |||   \  ||  \n || \t || \r  || \v 
# and or not 
# naming rules of variables
# types of writing  


######################################################
# >>  python 
# -- high -level language 
# -- interpreted lanbguage 
# -- easy to write and read
# -- open-source 
########################################################
# python 

# comment 

# single line comment (#)
# eg of  print("vishnu")

# multi line comment   ('''  or   """ )
'''this code adds
2 numbers  ''' 
# def fun(a,b):
#     return a +b 

#############################################################


# print("ankit",end=" and ")   
# print("ankit",end=" and ")   
# print("ankit",end=" and ")   
# print("ankit",end=" and ")   
# print("ankit",end=" and ")   
# print("ankit",end=" and ")   

##############################################################
# variable 
# its  a container that can hold some data

# a= 7 
# print(a)

##########################################
# in- built data types 
# integer  >>>  9 , -5 , 0 , 12  , -6   , 4 
# float    >>>  2.4  , -6.34  , 4.0  ,  -2.0 
# string  >>>   "a"  , 'a'  , "vishnu"  , "34"  ,  "2.0"  
# boolean  >>>  True  , False 
################################################
# keywords 
# are reserved words in python that has some special meaning 
# eg .   if , else , elif  ,  while  ,def ,  
##################################################
# variable  , data , datatype 

# name  = False
# print(name)  
# print(type(name))

#############################
# 15 digit is limit for float afte decimal 
# print(34.876545689876543456898765434578909876545678987654345678987654345887)

# print(round(-0.6))
################################################
#series  2 
#series - 3     version -   3.9.5 


# print "vishnu"  ## series 2 
# print("vishnu") # series 3 
#############################################
# rules 
# str + str  
# int +  int 
# int +  float/int 
# bool + int/float
# str + int          (error)

# print("ankit" +  "2345")  ##
# print(3+35)  
# print("2"+"3")  
# print("23"+12)  
# print(23.0 + 23)  
# print(True + 23.3)     #  1 
# print(False + 23)     ## 


# a= 2
# b=4
# c=1
# print(a+b+c)


###########################################################
# divisions 
# /  >>>  float div  >>>  float answer 
# //  >> int div     >>>  int answer 
# int div < float div 

# print(5/2)  # 2.5 
# print(5//2) # 2 
# print(-5/2)    #   -2.5 
# print(-5//2)    #   -2.5 
# print(-49/5)   ## -9.8 
# print(-49//5)   ##  
# print(49/5)   ##  9.8 
# print(49//5)   ##  9.8 


# -5 -4 -3  -2.5  -2 -1 0 1 2    2.5    3 4 5   9   9.8  10 

###################################################
# remainer / modulus(%)
# % 
# print(5%2)
# print(13%5)
# print(13%17)
# print(5%11) 
#####################################################
# indentation 

# =      assignament op 
# a=5 

# ==     comparison  op    (True , False )  
# print("23" == 23)  
# print(23.00 == 23) 



# a = 5//2
# if a==1:          # false 
#     print("A")   
# elif a==2:  ##  2.2 == 2  
#     print("B")  
# elif a==3:
#     print("C")
# else:  
#     print("Z")  
################################################################
# rules 
# start   ||| def 0   
# stop   |||  always given   |||  always exclusive 
# step   |||  def 1  

# contradcition >>> 

# for i in range(3,8,2):    ##  start =9      stop=3    back       step =-1  back   
    # print(i)
###########################################################
# break     || terminates the loop
# continue   ||  skip the iteration
# pass       || null operation 


# for i in range(6):  # i=3
#     if i==3: 
#         pass  
#     print(i)  
# else: 
#     print("end")

# def fun():
#     pass 
#################################################################
#################################################################
#################################################################
# escape sequences 
# 
# print("ankit")
# print('ankit')

# print("vishnu 'from' usa ")
# print('vishnu "from" usa ')

# print("vishnu "from" usa ")
# print('vishnu 'from' usa ')

# print("vishnu \"from\" usa ")


# \"   >> " 
# \\  >>  \ 
# \   >>> \  
# \n  >>>  new line 
# \t  >> tab (4 spaces)
# \r  
# \v

# print("\"")  
# print("\\\\\\")    

# print("i am \n here"  )
# print("i am\there"  )  

# import time
# for i in range(5):
#     print(i,end="\v")
    # time.sleep(1)  


# print("i am  \\n  here ")
# print("i am  \\\n  here ") 

################################################
# and or  not 

# precedence |||  not > and > or 

# and table 
#  0   0    0 
#  0   1     0 
#  1   0     0 
# 1    1     1 


# or table 
#  0   0      0 
#  0   1      1 
#  1   0      1
# 1    1      1 

# not table 
# 1    0 
# 0    1 


# print(True and False or True and not True)


# True and False or True and False
# False or False 
# false 

# print(7/0)

# or case  >>> if first condition is False then you will check condion 
# and case >>> if first condiotion is True then you will check condition  

# if 3>2 or 7/0:
#     print("yes")
# else:
#     print("no")
# 
# 
# #############################################################
# 
# Flasy values >>> ""   , 0   , False , none  , []   , ()  , set()   , {}
# 

# while True:
    # print("vishnu")

# i=0
# while i<5:
#     print("vishnu")
#     i=i+1

# else:
#     print("end")



# i=0
# while i<5:  #  5<5  
#     print("vishnu")
#     # i=i+1  # i=2 
#     i+=1   

# else:
#     print("end")  


# if 3:   
#     print("yes")  
# else:
#     print("no")

# i=0
# while i<20:
#     if i==4:
#         break
#     print("yes")
#     i=i+1

# else:
#     print("end")  



# print("a")
# print("\n\n")
# print("b")  



# print(r"line a  \n \t  line b ")  # read as it 

#############################

# print(2**3**2)  #  2**9 
########################################################

# naming rules of variables 

# 1. numerics can not be used in starting 
# 2. space is not allowed
# 3. no special character is allowed except _ 
# 4. keywords can not be used 

# 1name = 234   # error 
# nam3e = 23   # 
# na me = 12   # error 
# na$me = "ankit"  # error 
# _   = "ankit"
# and  = "ankit"  
# print = "ankit"
# print(print)

###################################################
# types of writing 

# variable_for_marks  = 23   ## snake case writing 
# varibaleForMarks    = 12     ## camel case writing 
######################################################

# i=3
# a=i*2
# print(a) 


# chapter 1 finished 



#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################
#************ string  **************
# definition 
# len , replication 
# indexing , slicing 
# input ,  split , two user input
# upper , lower  , title , capitalize 
# index , find , replace , immuabilty 
# eval 
# 


##################################################################
##################################################################
##################################################################


# definition 
# datatype that is enclosed in '' and "" 

# name = "ankit"
# print(name)



# s= " .24ab%"
# print(len(s))


# string indexing 

# v     i      s       h     n      u 
# 0     1      2       3      4      5 
# -6   -5     -4      -3     -2      -1 

# name = "vishnu"
# print(name[-12])



# name  = "vishnu"
# print(3*name)


##############################################################################
# slicing 

# v     i      s       h     n       u      _      e        l      d       r      e      d 
# 0     1      2       3      4      5     6      7         8     9      10      11     12           88 
#-13   -12   -11     -10    -9      -8     -7     -6        -5      -4      -3     -2      -1 

# name[start :  stop : step ]
# name[start(def either 0 or -1 ) : stop(exclusive if given) (def either 0 or -1 ) : step(def 1) ]

# name = "vishnu_eldred"  
# print(name[3:8:2])     ## start = 3   stop= 8   (l-r)   step =2  (l-r)
# print(name[2:11:3])   ## start = 3   stop= 8   (l-r)   step =1  (l-r)
# print(name[9:3])   ## start = 9    stop= 3    (r-l)   step =1  (l-r)  
# print(name[  :-5:-1])   ## start  = idk  , stop = -5   , step = -1 (r-l)  
# print(name[ -7: :-1])   ## start = -7    stop= idk       step = -1    (r-l)
# print(name[::2])    ### start= idk  stop= idk     step = 2 (l-r)
# print(name[::-1])   ### 
# print(name[1:6:0])   ### error 
# print(name[9:-4:1])   ###    
# print(name[3:3:2])    ## 
# print(name[-2:2])      ### start = -2    stop = 2   (r-l)   step=1 (l-r)   contra
# print(name[88::-1])      ### start = 88(12)   stop =  idk      step=-1 (r-l)   
# print(name[-77::2])      ### start =    stop =  idk      step=-1 (r-l)   
# print(name[4:11:17])      ### start =    stop =  idk      step=-1 (r-l)   
# print(name[99:-99:-1])      ### start =    stop =  idk      step=-1 (r-l)   
# print(name[2.3:])      ### start =    stop =  idk      step=-1 (r-l)   
# print(name[12::])


####################################################################################

# user input 

# str | def >>>  int, float , str , bool     >>> str only 
# float      >>>  int , float                >>> float 
# int        >>>  int                        >>>> int 

# name = input("enter name : ") 
# name = str(input("enter name : ")) 
# print(type(name))


# marks = float(input("enter marks : ")) 
# print(marks)
# print(type(marks)) 

 

# age = int(input("enter age : "))
# print(age ) 
# print(type(age )) 


# name = bool(input("enetr name : "))     ##      bool("") > False      ||||       bool(" ")> True
# print(name)




'''
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
#########################################################################################
'''
# 2 july 2022 

# split method


# name = "amit1_amit2_amit3"  ##  

# print(name.rsplit("m",1))  



# name = "ankkkkkiit"   ####  

# print(name.split("a"))


# name = "ankit"
# print(name.split("ankit"))


# name = "ankit                                   vishnu"
# print(name.split(" "))  ##   

###########################################################

# a,b,c = 3,21,1  


# a,b =  4 

# a, b = input("enter values : ").split(",") 

# print(a,b)
  
################################################################
# upper , lower , 

# name = "jkhhvjgchv"
# print(name.upper()) 




# name = "jkhhvHGGFDFGVHGHGJchv"
# print(name.lower()) 




# name = "i am hEre and. i aM leaRing python "
# print(name.title()) 
# print(name.capitalize()) 



#########################################################



# name = "kjgfcfxfygcamit1_amit2_amit3_amit4hghfxf"

# print(name.index("m"))   
# print(name.index("m",0,-1))   
# print(name.index("m",-5,-1))   
####################################################################


# find the position of 3rd m from left side 

# name = "ankit amit1_amit2_amit3_amit4 vishnu "

# a = name.index("m") 
# print(a)  #  7 

# b= name.index("m",a+1) 
# print(b)  

# c= name.index("m",b+1)
# print(c)

######################################################
# name = "ankit amit1_amit2_amit3_amit4 vishnu "

# print(name.rindex("y"))
####################################################
# name = "ankit amit1_amit2_amit3_amit4 vishnu "
# print(name.find("y"))  ### 
##################################################

# replace method 

# name  = "vishnu vatsal"

# print(name.replace("vishnu","chris"))

##############################################
# mutable   |||  changable 
# immutabale ||  not changable  
# string is immutable (not changable )

####################################################
# name  = "vishnu vatsal"
# b = name.replace("vishnu","chris") 
# print(name)  
# print(b)  


# name = .......vishnu vatsal.................                  b=   ..........chris vatsal....................

############################################################## 
# eval 
#  
# exp = "23+53-1ghd23*54"  
# print(eval(exp) )  
#########################################################

# name = "bmw"
# name = "alto"

# print(name)   


####################################################

# name = "bmw"
# name[0] = "B"

# print(name)   

################################################################


# car 

# car 











##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################

# *********** list ****************

# definition
# sum , min , max ,
# indexing , slicing , del 
# append , extend  , clear , copy
# count , index , insert, remove 
# , reverse , sort , sorted , replicationn
########################################################
# append  - add the element at the end of list 
# extend  - adds the elements of the another list at the end of list 
# clear  - clears the list 
# copy  - copy the list at othe loaction 
# reverse  - reverse the list (change the orginial list)
# sort    - sorting the list in ascending order  (change the orginial list)
# sorted  -    sorting the list in ascending order  (not change the orginial list)
# remove -  remove the element from the list || raise valueerror if not found 
# pop - remove the last item from the list 
# ############################################################


###############################################################

# definition >> is a datatype that can store any type of data
# mutable  and inclosed in []
# # eg  
# l = ["ankit",12,453.23,False, [12,1,4]] 
# print(l)
# print(type(l))

##################################################
# True (1)  
# False (0)

# l= [1,6,3,2,1, True,False] 
# print(sum(l))
# print(max(l))  
# print(min(l))   


########################################################

# l= [132,123,86,36,234 , "vishnu"]
# print(l[-1][1])

######################################################
# l= [132,123,86,36,234 , "vishnu"] 

# print(l[ : -3: -1])   ### start = idk  , stop = -3    step = -1 (r-l)
# print(l[ :: -2])       ### start= idk  , stop = idk   step = -2 (r-l)
# print(l[ -2:2: ])       ### start = -2   , stop = 2   (r-l)      step =1 (l-r)  contra 
# print(l[ -1:-1:1 ])       ### start = -2   , stop = 2   (r-l)      step =1 (l-r)  contra 
# print(l[ 16::-1 ])         ### start = 16(5)   , stop = idk           step =-1 (r-l)  contra 
# print(l[ 1:7:0])            ### step can never be zero 
# print(l[ 2:  7 :1])            ### step can never be zero 

# ####################################################
# l = [10,20,30,40]
# l.append(50)  
# print(l)

####################################################### 
# len = max(index) +1  


# l = [10,20,30,40]
# l.append([2,23,42,424,12])  
# print(l)



#####################################################
# l= [123,345,2345,2345,234]
# l.clear()
# print(l) 

#############################################################  

# l= [123,345,2345,2345,234]
# del l 
# print(l) 


#####################################################


# l = [10,20,30,40,]  
# l.append([23,1234,1234,234,234,234])
# l.extend([23,1234,1234,234,234,234])

# print(l)  
####################################################
# l = [10,20,30,40,10]  
# print(l.index(10,2)) 
#################################################

# l =[10,20,30,40,50]
# l.insert(13,100)
# print(l)  
################################################

# l = [10,20,30,40,]  
# print(l.pop()) 
# print(l)


################################################

# l = [10,20,30,40,"10"]  
# l.remove("10")
# print(l)

##################################################
# l=[2,23,4,2,4,1234,23,4234,234,234,34]
# l.sort() ## 
# l.reverse()  
# print(l)
###############################################
# sort vs sorted
# sort    >> change o list 
# sorted >>  will not change o list 

# l=[1654,23,4,2,4,1234,23,4234,234,234,34] 
# b=sorted(l) 
# l.sort()
# print(l)
# print(b)
#
# l=................                        b= ......................................
######################################################

# l=[2,23,4,2,4,1234,23,4234,234,234,34]

# l2= l.copy()
# print(l2)  
# print(id(l))
# print(id(l2))



# l=[2,23,4,2,4,1234,23,4234,234,234,34,4,4]
# print(l.count(4)) 


# #############################################################
# nested list 
# l = [1,2,23,4,2,3,2,[123,34, [12,13,1,3,3] , 23,4,1,24,234,1]]
# print(l[-1][2][2])
################################################
# replication 

# l = [1,2,3,4]
# print(3*l)
####################################

# t1= [23,12,12,]
# t2= [32,12,90,80]
# t=t1+t2
# # t=t1-t2   # error
# # t=t1*t2   # error
# # t=t1/t2    #error
# print(t)







#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
# tuple 
# definition , min , max , sum , 
# indexing , slicing  , replication 
# immuatble  , list vs tuple 
# count  , immutable 
#
# 
# ################################################ 
# tuple  
# definistion >> datatype that can store any type of data 
# immutable  , ()

# t = (24,2,4,5,2345,23,23.24,"ankit")
# print(t) 
####################################################
# t =  (24,2,4,5,2345,23,23.24,"ankit")

########################################################
# tuple is (not changable) || immutable || modifictaion 
# t1= (23,12,12,)
# t2= (32,12,90,80)
# t1= (100,200)  
# print(t1)
#############################################
# t2= (32,12,90,80)
# t2[0]=100
# print(t2)
################################################
# t1= (23,12,12,)
# t2= (32,12,90,80)
# t=t1+t2
# print(t)

#####################################################
# list vs tuple 
#        list                               tuple
# 1. >>> []                                  () 
# 2. >>> mutable                            immutable 
# 3. >>> iteration is slow than tuple       iteration is fast than tuple 
# 4. >>> memory consuption is more in list    memory consuption is more in list 
# 5. >>>  insertion, deletion                 not possible 
# 

#######################################################
# import time 
# print(time.time())  
# t1= time.time() 
# l= [1,2,23,4,5,5,3,4,2,23,2,2,2,2,2,2,4,34,4,4,3,4,2,23,34,4,3,3,2,43,4,23,4,4]
# for i in l:  
#     print(i) 
# t2= time.time() 
# print(t2-t1)


# 0.00025224  ##list 

###############################################################
# import time 
# print(time.time())  
# t1= time.time() 
# l= (1,2,23,4,5,5,3,4,2,23,2,2,2,2,2,2,4,34,4,4,3,4,2,23,34,4,3,3,2,43,4,23,4,4) 
# for i in l:  
#     print(i) 
# t2= time.time() 
# print(t2-t1)


# 0.000087022   ##tuple  

###################################################################

# integers 
# t = (23)
# t =  23 

# tuple
# t =  ()  
# t =  23, 
# t = (23,)  
# t= 23,234,2,34,234,234,2345,

# print(t) 
# print(type(t)) 
##################################################################
# replication  
# t = 12,1,313,12
# print(t*10)
################################################################

# t = (12,124,234,234)
# for i in t:
#     print(i)


# t = (12,124,234,234)
# for i in range(len(t)):
#     print(i)













#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

# function chapter 
# definition , syntax
# parameters  ,  arguments , return statements 


#######################################################
# function chapter 

# code block that is designed to do the specific task 
# we can use it mulitple times 
# it will run unless we are not calling it. 

# syntax 

# def fun(a,b,c,d):      ## function header 
#     return a,b,c,d      ## function definition  

# print(fun(2,3,4,5))     ## function calling 

################################################################

# syntax 

# def fun(a,b,c=10,d=20):      ## function header 
#     return a,b,c,d      ## function definition  

# print(fun(2,3,c=13,d=12))     ## function calling 


# parameters >>>  a,b,c,d 
# non - def parameters >>> a, b 
# def parameters  >>> c , d 

# argumets  >>>> 2,3,c=3,d=12
# positional arguments >>>  2,3 
# keyword arguments  >>>>   13 , 12 


##########################################################

# return statement 
# -- return statement terminates function instantly 
# -- by def none 
# -- function always return any value (by def it returns none)
# -- we can return multiple values in return statement in form of tuple


# def fun():              #  2 
#     return 2,34,2,3,2,3,23
    

# print(  fun()   )     ### 1   a b 


# vishnu 
# none

######################################################################
######################################################################
######################################################################
# rules 
#--  non- def parameters can not follow default parameters 
#-- positional arguments can not follow keyword arguments  
# -- no anyone parameters can get multiple values from fuunction calling 


# def fun(a,b,c=23,d=12):      ## 
#     print(a)
#     print(b)  
#     print(c)  
#     print(d)   

# print(fun(2,3,c=5))        ## 

#########################################################################
#########################################################################
#########################################################################

# global variable -- defined the outsid of the function || accesible everyehere 
# local variable  -- inside the function ||| access only inside function


# a=2                #   global
# def fun(): 
#     global a 
#     b=3            ## local 
#     a=a+10 
#     print(a) 
#     print(b)  

# fun()
# print(a) 
# # print(b)   


####################################

# a= 6            ## 1 
# def fun():       ## 4    
#     x=7         ## 5 
#     print(x)    ## 6 
# print(a)        ## 2 
# fun()          ## 3 
# print(a)       ## 7 

# 6
# 7
# 6 

################################################


# a= 6            ## 1 
# def fun():       ## 4    
#     x=7          ## 5 
#     global a     ## 6 
#     a=19         ##7
#     print(a)    ## 8 
# print(a)        ## 2 
# fun()            ## 3    
# print(a)         

# 6 
# 19
# 19
# 

########################################
# a= 6            ## 1 
# def fun():       ## 4  
#     b=23        # local 
#     global a    # global 
#     print(a)     

# print(a)        ## 2 
# fun()            ## 3     
# print(a)         

########################################################
# WAF that will recieve 2 variobles and will return its sum 

# def fun(a,b):
#     return  a+b 

# print(fun(3,5))
# print(fun(23,234))
# print(fun(2654323,987654))
#####################################################################

# WAF that will recieve 2 variobles and will return its sum ,subs ,  multiplication , div 

# def fun(a,b):
#     return  a+b  , abs(a-b)  , a*b , int(a/b) 

# print(fun(75,5)) 
# # print(fun(23,234))  
# # print(fun(2654323,987654))

###############################################################

# print(abs(23))
# print(abs(-23))

##############################################################
# vishnu 
# "Hello Vishnu"

# def fun(name):
#     return "Hello "+ name.capitalize()

# # print(fun("vishnu"))  
# print(fun("vatsal"))  

#################################################################
# vishnu  , 4 
# vishnuvishnuvishnuvishnu



# def fun(name,n):
#     return  name*n 

# print(fun("vishnu",4))  
# print(fun("vatsal",5)) 

###################################################################
###################################################################
###################################################################
###################################################################
###################################################################
###################################################################
###################################################################
###################################################################
###################################################################
###################################################################
###################################################################
###################################################################
# string 
# list 
# tuple 
# function   
###################################################################




















###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################

''' #######################################################################'''
''' #######################################################################'''
''' #######################################################################'''
''' #######################################################################'''
''' #######################################################################'''
''' #######################################################################'''
''' #######################################################################'''

# 3 july 2022 


# set 



########################################################################## 
# ""
# []
# ()
# set()
# {}
############################################################################
# set chapter
# definition , len , max ,  min , sum 
# clear  >>>  it will clear all the elements from the set 
# add   >>>  add the new element in the set 
# difference  >>> a.differce(b)  >> it will get a new set having elements from  set a but that are not in b 
# discart  >>>>  remove the value ||| if not found do nothing
# remove  >>>     remove the value ||| if not found  keyerror
# a.issubset(b) >>>  True if all elements of a presernt in b ||| if a is child of b 
# a.issuperset(b) >>>  True  if all elements of b present in a |||  if a is parent of b 
# update  >>>>   it will update the set with the eleemnts of other set 
# union  >>>   unique values u will get 
# pop >>>   remove the random value from the set 
######################################################################################



# set 
# 1. definition - 
# -- its  a  datatype that can hold anytyope of data
# -- it can not have dublicates 
# -- it does not have indexing (no fixe positions of the elements )
# -- it will have {} brackets and empty set will be set()
# --   you can not have mutable datatype (list,set,dict) in set 


# s= {2,3,4 , "apple", "cherry" , "banana" , 4 , "apple"} 

# s.clear() 

# print(s)  
# print(len(s))  


# s= {10,20,30,40,50}
# for i in s:
#     print(i)




# s= {10,20,30,40,50}
# s.add(100) 
# print(s)  

# 



# s= {10,20,30,40,50}
# print(min(s))
# print(max(s))
# print(sum(s))

########


# s= {10,20,30,40,50} 
# s2= {100,200,300}

# s.update(s2)
# print(s)

############################

# a= {10,20,30,40,50}
# b = {100,200,300,40,20}

# n= a.difference(b)
# print(n) 

###############################
# a= {10,20,30,40,50} 

# a.discard(20)
# a.remove(200)
# print(a) 

##############################


# a= {10,20,30,40,50}
# b = {100,200,300,40,20}

# n= a.intersection(b)
# print(n) 

#######################################


# a= {20,40}
# b = {100,200,300,40,20}

# n= a.issubset(b)    ##  is a  child of b  ...  
# print(n) 


# a= {20,40}
# b = {100,200,300,40,20}

# n= b.issuperset(a)    ##  is b parent of a  ...  
# print(n) 

####################



# a= {20,40,30,100}
# a.pop() 
# print(a)  

########################################

# a= {10,20,30,40,50}
# b = {100,200,300,40,20}


# n= a.union(b)  
# print(n) 
########################################

# s= {"ankit",23,23.23, (23,123   ,124,3 )   , }
# print(s)


###########################################################

# set chapter finished
##########################################################
##########################################################
##########################################################
##########################################################
##########################################################
##########################################################
##########################################################
##########################################################
######################################################################
# in operator 


# if 100 in {10,20,30,40,50}:
#     print("yes")

# else:
#     print("no")

####################################################################
# is operator 
# int,  float , str , tuple   ||| inbuilt and immutable data type || if you are same values then it will hold same location 
# list , set   ||  mutable  || different location || different id  || is will give False 

# a= {1,2,3}
# b=  {1,2,3}

# print(id(a))   
# print(id(b))
# print(a is b)  ###  


# print(a == b)  ##   quanity  True 


##################################################################################
# for -else 

# for i in range(5):
#     if i==3:
#         break
#     print(i)
# else:
#     print("finished")
######################################################################################
##########################################################
##########################################################
##########################################################
##########################################################
##########################################################
##########################################################
##########################################################
##########################################################






